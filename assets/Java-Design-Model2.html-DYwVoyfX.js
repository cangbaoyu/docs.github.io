import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,e as n,o as p}from"./app-DwDXjbBC.js";const t={};function a(r,e){return p(),l("div",null,e[0]||(e[0]=[n('<h1 id="说说你对设计原则的理解" tabindex="-1"><a class="header-anchor" href="#说说你对设计原则的理解"><span>说说你对设计原则的理解</span></a></h1><h2 id="口诀" tabindex="-1"><a class="header-anchor" href="#口诀"><span>口诀</span></a></h2><p>为了便于记忆，我们可以使用一个口诀来记忆面向对象设计原则：<strong>开口合里最单依</strong></p><ul><li>开：开闭原则</li><li>口：接口隔离原则</li><li>合：组合/聚合原则</li><li>里：里式替换原则</li><li>最：最少知识原则（迪米特法则）</li><li>单：单一职责原则</li><li>依：依赖倒置原则</li></ul><h2 id="开闭原则-open-closed-principle-ocp" tabindex="-1"><a class="header-anchor" href="#开闭原则-open-closed-principle-ocp"><span>开闭原则(Open-Closed Principle, OCP)</span></a></h2><p>一个软件实体应当对扩展开发,对修改关闭.说的是,再设计一个模块的时候,应当使这个模块可以在不被修改的前提下被扩展.换言之,应当可以在不必修改源代码的情况下改变这个模块的行为，在保持系统一定稳定性的基础上，对系统进行扩展。这是面向对象设计（OOD）的基石，也是最重要的原则。</p><h2 id="接口隔离原则-interface-segregation-principle-isp" tabindex="-1"><a class="header-anchor" href="#接口隔离原则-interface-segregation-principle-isp"><span>接口隔离原则(Interface Segregation Principle, ISP)</span></a></h2><ul><li>一个类对另外一个类的依赖是建立在最小的接口上。</li><li>使用多个专门的接口比使用单一的总接口要好.根据客户需要的不同,而为不同的客户端提供不同的服务是一种应当得到鼓励的做法.就像&quot;看人下菜碟&quot;一样,要看客人是谁,再提供不同档次的饭菜.</li><li>胖接口会导致他们的客户程序之间产生不正常的并且有害的耦合关系.当一个客户程序要求该胖接口进行一个改动时,会影响到所有其他的客户程序.因此客户程序应该仅仅依赖他们实际需要调用的方法.</li></ul><h2 id="组合-聚合复用原则-composite-aggregate-reuse-principle-carp" tabindex="-1"><a class="header-anchor" href="#组合-聚合复用原则-composite-aggregate-reuse-principle-carp"><span>组合/聚合复用原则(Composite/Aggregate Reuse Principle，CARP)</span></a></h2><p>在一个新的对象里面使用一些已有的对象,使之成为新对象的一部分;新的对象通过这些向对象的委派达到复用已有功能的目的.这个设计原则有另一个简短的表述:要尽量使用合成/聚合,尽量不要使用继承.</p><h2 id="里氏代换原则-liskov-substitution-principle-lsp" tabindex="-1"><a class="header-anchor" href="#里氏代换原则-liskov-substitution-principle-lsp"><span>里氏代换原则(Liskov Substitution Principle，LSP)</span></a></h2><p>由 Barbar Liskov (芭芭拉.里氏) 提出，是继承复用的基石。</p><p>所有引用基类的地方必须透明的使用其子类的对象。只要父类能出现的地方子类也可以出现，而且替换为子类不会产生任何错误或异常，但是反过来就不行，有子类出现的地方，父类未必就能适应。</p><h2 id="最少知识原则-least-knowledge-principle-lkp" tabindex="-1"><a class="header-anchor" href="#最少知识原则-least-knowledge-principle-lkp"><span>最少知识原则(Least Knowledge Principle，LKP)</span></a></h2><p>一个对象应当对其他对象有尽可能少的了解.</p><p>没有任何一个其他的 OO 设计原则象迪米特法则这样有如此之多的表述方式,如下几种：</p><ul><li>只与你直接的朋友们通信(Only talk to your immediate friends)</li><li>不要跟&quot;陌生人&quot;说话(Don&#39;t talk to strangers)</li><li>每一个软件单位对其他的单位都只有最少的知识,而且局限于那些本单位密切相关的软件单位</li></ul><p>就是说,如果两个类不必彼此直接通信,那么这两个类就不应当发生直接的相互作用,如果其中的一个类需要调用另一个类的某一个方法的话,可以通过第三者转发这个调用。</p><h2 id="单一职责原则-simple-responsibility-pinciple-srp" tabindex="-1"><a class="header-anchor" href="#单一职责原则-simple-responsibility-pinciple-srp"><span>单一职责原则(Simple responsibility pinciple，SRP)</span></a></h2><p>就一个类而言,应该仅有一个引起它变化的原因,如果你能想到多于一个的动机去改变一个类,那么这个类就具有多于一个的职责.应该把多于的指责分离出去,分别再创建一些类来完成每一个职责.</p><h2 id="依赖倒置原则-dependence-inversion-principle" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则-dependence-inversion-principle"><span>依赖倒置原则(Dependence Inversion Principle)</span></a></h2><p>要求客户端依赖于抽象耦合.</p><ul><li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。</li><li>接口或抽象类不依赖实现类</li><li>实现类依赖接口或抽象类</li></ul><p>采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定，降低并行开发引起的风险，提高代码的可读性和可维护性。</p>',24)]))}const c=i(t,[["render",a],["__file","Java-Design-Model2.html.vue"]]),d=JSON.parse('{"path":"/audition/design/Java-Design-Model2.html","title":"说说你对设计原则的理解","lang":"zh-CN","frontmatter":{"description":"说说你对设计原则的理解 口诀 为了便于记忆，我们可以使用一个口诀来记忆面向对象设计原则：开口合里最单依 开：开闭原则 口：接口隔离原则 合：组合/聚合原则 里：里式替换原则 最：最少知识原则（迪米特法则） 单：单一职责原则 依：依赖倒置原则 开闭原则(Open-Closed Principle, OCP) 一个软件实体应当对扩展开发,对修改关闭.说的是...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/audition/design/Java-Design-Model2.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"说说你对设计原则的理解"}],["meta",{"property":"og:description","content":"说说你对设计原则的理解 口诀 为了便于记忆，我们可以使用一个口诀来记忆面向对象设计原则：开口合里最单依 开：开闭原则 口：接口隔离原则 合：组合/聚合原则 里：里式替换原则 最：最少知识原则（迪米特法则） 单：单一职责原则 依：依赖倒置原则 开闭原则(Open-Closed Principle, OCP) 一个软件实体应当对扩展开发,对修改关闭.说的是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T10:19:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T10:19:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说你对设计原则的理解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-16T10:19:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"口诀","slug":"口诀","link":"#口诀","children":[]},{"level":2,"title":"开闭原则(Open-Closed Principle, OCP)","slug":"开闭原则-open-closed-principle-ocp","link":"#开闭原则-open-closed-principle-ocp","children":[]},{"level":2,"title":"接口隔离原则(Interface Segregation Principle, ISP)","slug":"接口隔离原则-interface-segregation-principle-isp","link":"#接口隔离原则-interface-segregation-principle-isp","children":[]},{"level":2,"title":"组合/聚合复用原则(Composite/Aggregate Reuse Principle，CARP)","slug":"组合-聚合复用原则-composite-aggregate-reuse-principle-carp","link":"#组合-聚合复用原则-composite-aggregate-reuse-principle-carp","children":[]},{"level":2,"title":"里氏代换原则(Liskov Substitution Principle，LSP)","slug":"里氏代换原则-liskov-substitution-principle-lsp","link":"#里氏代换原则-liskov-substitution-principle-lsp","children":[]},{"level":2,"title":"最少知识原则(Least Knowledge Principle，LKP)","slug":"最少知识原则-least-knowledge-principle-lkp","link":"#最少知识原则-least-knowledge-principle-lkp","children":[]},{"level":2,"title":"单一职责原则(Simple responsibility pinciple，SRP)","slug":"单一职责原则-simple-responsibility-pinciple-srp","link":"#单一职责原则-simple-responsibility-pinciple-srp","children":[]},{"level":2,"title":"依赖倒置原则(Dependence Inversion Principle)","slug":"依赖倒置原则-dependence-inversion-principle","link":"#依赖倒置原则-dependence-inversion-principle","children":[]}],"git":{"createdTime":1737022746000,"updatedTime":1737022746000,"contributors":[{"name":"cangbao","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":3.63,"words":1088},"filePathRelative":"audition/design/Java-Design-Model2.md","localizedDate":"2025年1月16日","autoDesc":true}');export{c as comp,d as data};
