import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as e}from"./app-DwDXjbBC.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="说说常用开源框架中设计模式使用分析" tabindex="-1"><a class="header-anchor" href="#说说常用开源框架中设计模式使用分析"><span>说说常用开源框架中设计模式使用分析</span></a></h1><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言"><span>一、前言</span></a></h2><p>设计模式代表了软件设计的最佳实践，是经过不断总结提炼出来的代码设计经验的分类总结，这些模式或者可以简化代码，或者可以是代码逻辑开起来清晰，或者对功能扩展很方便</p><p>设计模式按照使用场景可以分为三大类：</p><ul><li><p>创建型模式（Creational Patterns）：对对象的实例化过程进行抽象，这使得一个系统可以不用关心这些对象是如何创建，组合，呈现的，对于类创建模式来说通过使用继承改变实例化的类，对于对象创建模式来说通过使用代理来实例化所需要的对象。</p><ul><li>工厂模式</li><li>原型模式</li><li>构建者模式</li><li>单例模式</li></ul></li><li><p>结构型模式（Structural Patterns）：通过对多个类和对象进行组合得到复杂结构的类，一般使用继承继承或者成员变量引用形式来实现。</p><ul><li>适配器模式</li><li>桥接模式</li><li>过滤器模式</li><li>组合模式</li><li>装饰者模式</li><li>门面模式</li><li>享元模式</li><li>代理模式</li></ul></li><li><p>行为型模式（Behavioral Patterns）：行为模式不仅表达了对象和类，还表达了他们之间的交互，涉及到了对象和算法的分配。</p><ul><li>责任链模式</li><li>命令模式</li><li>解释器模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>空对象模式</li><li>策略模式</li><li>模板方法模式</li><li>访问者模式</li></ul></li></ul><h2 id="二、责任链设计模式-chain-of-responsibility-pattern" tabindex="-1"><a class="header-anchor" href="#二、责任链设计模式-chain-of-responsibility-pattern"><span>二、责任链设计模式（Chain of Responsibility Pattern）</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>责任链模式是把多个对象串联起来形成一个链状结构，让每个对象都有机会对事件发送者的请求进行处理。责任链模式是设计模式中的行为模式，设计意图是为了使事件发送者和事件接受者之间解耦。通常责任链链中的每个对象都有下一个对象的引入（例如 <code>Tomcat</code> 里面 <code>StandardPipeline</code> 用来管理 <code>valve</code>），或者有个同一个链管理工厂里面使用数组存放了所有的对象（例如 <code>Tomcat</code> 里面 <code>ApplicationFilterChain</code> 用来关系 <code>filter</code>）。</p><h3 id="tomcat-中-valve-链" tabindex="-1"><a class="header-anchor" href="#tomcat-中-valve-链"><span>Tomcat 中 Valve 链</span></a></h3><p>Tomcat 中 <code>StandardEngine</code>, <code>StandardHost</code>, <code>StandardContext</code> 里面都有自己 <code>StandardPipeline</code>,下面以 <code>StandardEngine</code> 里面 <code>StandardPipeline</code> 为例讲解</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-bf812e77605ba1a3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面类图可知道每个 <code>Valve</code> 都要继承 <code>ValveBase</code> 类，该类里面有一个 <code>Valve</code> 的引用，实际是链中下一个节点对象，<code>Valve</code> 就是通过每个 <code>Valve</code> 里面的 <code>next</code> 串联为链的。</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-51ec28c227c785bd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每个 <code>valve</code> 的 <code>invoke</code> 方法里面调用 <code>next.invoke</code> 激活链中下一个节点,并且 <code>StandardEngine</code>, <code>StandardHost</code>, <code>StandardContext</code> 都有一个<code> basic valve</code> 这个 <code>valve</code> 在链的末尾用来激活子容器的 valve 链。</p><h3 id="tomcat-中-filter-链" tabindex="-1"><a class="header-anchor" href="#tomcat-中-filter-链"><span>Tomcat 中 Filter 链</span></a></h3><p>Tomcat 中 <code>Filter</code> 链是使用 <code>ApplicationFilterChain</code> 来管理的，具体结构如下图：</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-a7ecb943aa15c858.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可知 <code>Filter</code> 链不是像 <code>Valve</code> 一样在内部维护下个节点的引用，而是在 <code>ApplicationFilterChain</code> 中搞了个数组存放所有的 <code>Filter</code>，并通过 <code>n</code> 统计 <code>Filter</code> 总个数，<code>pos</code> 是当前 <code>filter</code> 的下标。</p><p><code>ApplicationFilterChain</code> 的 <code>doFilter</code> 代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> response)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        throws IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        internalDoFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">response)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> internalDoFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServletRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> response) throws IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ServletException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Call the next filter if there is one</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (pos </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //获取filter链中下标为pos的filter</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            ApplicationFilterConfig</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filterConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> filters[pos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Filter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> filter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                filter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> filterConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                support</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fireInstanceEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InstanceEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BEFORE_FILTER_EVENT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                          filter, request, response);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAsyncSupported</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;false&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equalsIgnoreCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                        filterConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getFilterDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAsyncSupported</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Globals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ASYNC_SUPPORTED_ATTR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                            Boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FALSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                //调用自定义filter的dofilter方法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, response, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                support</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fireInstanceEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">InstanceEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">AFTER_FILTER_EVENT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                                          filter, request, response);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            } </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ....</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   .....</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li>当一个请求需要根据请求参数的不同由不同对象来处理时候。</li><li>当一个请求需要固定对象顺序处理，并且可扩展性的在固定顺序里面插入新的对象进行处理时候。</li></ul><h2 id="三、工厂模式-factory-pattern" tabindex="-1"><a class="header-anchor" href="#三、工厂模式-factory-pattern"><span>三、工厂模式（Factory Pattern）</span></a></h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h3><p>工厂模式是创建型模式，他封装了对象的创建过程，调用者使用具体的工厂方法根据参数就可以获取对应的对象。</p><h3 id="spring-框架中-beanfactory" tabindex="-1"><a class="header-anchor" href="#spring-框架中-beanfactory"><span>Spring 框架中 BeanFactory</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-2d102832375148ef.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图 <code>BeanFactory</code> 接口提供了 <code>getBean</code> 方法，在 <code>AbstractBeanFactory</code> 中实现了该方法，经过层层继承，实现，最后 <code>DefaultListableBeanFactory</code> 实现了 <code>BeanDefinitionRegistry</code> 接口用来保存 <code>bean</code> 定义，继承了 <code>AbstractAutowireCapableBeanFactory</code> 用来支撑 <code>autowired</code>。</p><h3 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子"><span>举个例子</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testBeanFactoy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws NamingException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> SQLException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ParseException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建 Bean 工厂</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    DefaultListableBeanFactory</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bf </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DefaultListableBeanFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 给 Bean 工厂添加 Bean 定义, 解析 xml 里面的 Bean 放入 Bean 工厂</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    loadBeanDefinitions</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(bf)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 根据名字从 Bean 工厂获取 Bean</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Hello</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hello </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Hello) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Hello2</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hello2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (Hello2) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    hello2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadBeanDefinitions</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DefaultListableBeanFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beanFactory) throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    XmlBeanDefinitionReader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beanDefinitionReader </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XmlBeanDefinitionReader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanFactory)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] configLocations </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;beans2.xml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (configLocations </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        beanDefinitionReader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadBeanDefinitions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(configLocations);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1"><span>使用场景</span></a></h3><ul><li>不同条件下创建不同实例，用于统一管理 <code>Bean</code></li><li>不同条件下调用不同工厂方法获取不同场景下的 <code>Bean</code></li></ul><h2 id="四、单例设计模式-singleton-pattern" tabindex="-1"><a class="header-anchor" href="#四、单例设计模式-singleton-pattern"><span>四、单例设计模式（Singleton Pattern）</span></a></h2><h3 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2"><span>介绍</span></a></h3><p>单例模式是一种创建型模式，单例模式提供一个创建对象的接口，但是多次调用该接口返回的是同一个实例的引用，目的是为了保证只有一个实例，并且提供一个访问这个实例的统一接口。</p><h3 id="spring-中单例-bean-的创建" tabindex="-1"><a class="header-anchor" href="#spring-中单例-bean-的创建"><span>Spring 中单例 <code>Bean</code> 的创建</span></a></h3><p>Spring 中默认配置的 <code>bean</code> 的 <code>scope</code> 为 <code>singleton</code>，也就是单例作用域。那么看看它是如何做到的。在 <code>AbstractBeanFactory</code> 类里面的 <code>doGetBean</code> 方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doGetBean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requiredType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> typeCheckOnly) throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beanName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transformedBeanName</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(name)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bean </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 解决set循环依赖</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sharedInstance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (sharedInstance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建单件bean.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mbd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            sharedInstance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ObjectFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeansException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(beanName, mbd, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeansException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                        throw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ex;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            })</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            bean </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getObjectForBeanInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(sharedInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mbd)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       //创建原型bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mbd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isPrototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //创建request作用域bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getSingleton</code> 代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ObjectFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> singletonFactory) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">notNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(beanName, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&#39;beanName&#39; must not be null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">singletonObjects</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> singletonObject </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">singletonObjects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (singletonObject </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            beforeSingletonCreation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                singletonObject </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> singletonFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeanCreationException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (recordSuppressedExceptions) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">suppressedExceptions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                afterSingletonCreation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            addSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> singletonObject)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (singletonObject </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> NULL_OBJECT </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> singletonObject </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> addSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> singletonObject) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">singletonObjects</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">singletonObjects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(beanName, (singletonObject </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> singletonObject </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NULL_OBJECT));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">singletonFactories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">earlySingletonObjects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">registeredSingletons</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(beanName);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> singletonObjects </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CollectionFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createConcurrentMapIfPossible</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可知 Spring 内部四通过一个 <code>ConcurrentMap</code> 来管理单件 <code>bean</code> 的。获取 <code>bean</code> 时候会先看看 <code>singletonObjects</code> 中是否有，有则直接返回，没有则创建后放入。</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-3013e4bf12ef0274.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Spring 的 <code>bean</code> 工厂管理的单例模式管理的是多个 <code>bean</code> 实例的单例，是工厂模式管理所有的 <code>bean</code>,而每个 <code>bean</code> 的创建又使用了单例模式。</p><h3 id="使用场景-2" tabindex="-1"><a class="header-anchor" href="#使用场景-2"><span>使用场景</span></a></h3><ul><li>同一个 <code>JVM</code> 应用的不同模块需要使用同一个对象实例进行信息共享。</li><li>需要同一个实例来生成全局统一的序列号</li></ul><h2 id="五、原型设计模式-prototype-pattern" tabindex="-1"><a class="header-anchor" href="#五、原型设计模式-prototype-pattern"><span>五、原型设计模式（Prototype Pattern）</span></a></h2><h3 id="介绍-3" tabindex="-1"><a class="header-anchor" href="#介绍-3"><span>介绍</span></a></h3><p>相比单例设计模式，原型模式是每次创建一个对象，下面看下 Spring 是如何使用原型模式的</p><h3 id="spring-中原型-bean-的创建" tabindex="-1"><a class="header-anchor" href="#spring-中原型-bean-的创建"><span>Spring 中原型 <code>bean</code> 的创建</span></a></h3><p>创建原型 <code>bean</code> 需要在 <code>xml</code> 特别说明：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bean</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.lusifer.demo.Hello&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;prototype&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doGetBean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requiredType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> typeCheckOnly)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beanName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> transformedBeanName</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(name)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Eagerly check singleton cache for manually registered singletons.</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sharedInstance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (sharedInstance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // Create bean instance.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mbd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isSingleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //创建原型bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mbd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isPrototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // It&#39;s a prototype -&gt; create a new instance.</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> prototypeInstance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                    beforePrototypeCreation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                    prototypeInstance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createBean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mbd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                    afterPrototypeCreation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                bean </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getObjectForBeanInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(prototypeInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> beanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mbd)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeansException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            cleanupAfterBeanCreationFailure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(beanName)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (T) bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createBean</code> 函数里面则是根据 <code>bean</code> 定义创建新 <code>bean</code>，感兴趣的可以看看。</p><h3 id="使用场景-3" tabindex="-1"><a class="header-anchor" href="#使用场景-3"><span>使用场景</span></a></h3><p>当有业务场景使用某个 <code>bean</code> 时候需要使用自己的一个拷贝的时候使用。</p><h2 id="六、策略模式-strategy-pattern" tabindex="-1"><a class="header-anchor" href="#六、策略模式-strategy-pattern"><span>六、策略模式（Strategy Pattern）</span></a></h2><h3 id="介绍-4" tabindex="-1"><a class="header-anchor" href="#介绍-4"><span>介绍</span></a></h3><p>策略模式属于行为性模式，它定义一系列的算法对象,使用时候可以使它们相互替换。</p><h3 id="spring-中-bean-实例化策略" tabindex="-1"><a class="header-anchor" href="#spring-中-bean-实例化策略"><span>Spring 中 <code>bean</code> 实例化策略</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-24f08d52b6fc7fba.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从图知道：接口 <code>InstantiationStrategy</code> 是实例化策略接口类，它定义了三个实例化接口，然后 <code>SimpleInstantiationStrategy</code> 实现了该策略，它主要做一些简单的根据构造函数实例号 <code>bean</code> 的工作，然后 <code>CglibSubclassingInstantiationStrategy</code> 又继承了 <code>SimpleInstantiationStrategy</code> 新增了方法注入方式根据 <code>cglib</code> 生成代理类实例化方法。</p><p>在 <code>AbstractAutowireCapableBeanFactory</code> 中管理了该策略的一个对象，默认是 <code>CglibSubclassingInstantiationStrategy</code> 策略，运行时候可以通过 <code>setInstantiationStrategy</code> 改变实例化策略，如果你自己写个个策略的话。</p><h3 id="spring-中-aop-代理策略" tabindex="-1"><a class="header-anchor" href="#spring-中-aop-代理策略"><span>Spring 中 AOP 代理策略</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-7e0b0badc2deef53.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首先看 <code>AopProxyFactory</code> 接口类提供了 <code>createAopProxy</code> 接口，这个是策略模式的接口方法。然后 <code>DefaultAopProxyFactory</code> 实现了该接口作为策略的实现者。然后 <code>ProxyCreatorSupport</code> 里面引用了 <code>AopProxyFactory</code>，并且提供了 <code>get</code>, <code>set</code> 方法用来运行时改变策略，这里 Spring 只实现了 <code>DefaultAopProxyFactory</code> 这一个策略，如果需要自己也可以写个。</p><p><code>DefaultAopProxyFactory</code> 里面的 <code>createAopProxy</code> 的逻辑如下，可以在运行时根据参数决定用 <code>Cglib</code> 策略还是 <code>JDK动态代理</code> 策略生成代理类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AopProxy</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createAopProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AdvisedSupport</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> config) throws AopConfigException {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果 XML 打开了优化开关，或者设置为了代理目标类，或者目前类没有接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isOptimize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isProxyTargetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hasNoUserSuppliedProxyInterfaces</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(config)) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> targetClass </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTargetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (targetClass </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AopConfigException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;TargetSource cannot determine target class: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                    &quot;Either an interface or a target is required for proxy creation.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 如果有接口，或者通过 Proxy.newProxyInstance 生成的，则使用 JDK动态代理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">targetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isInterface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isProxyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(targetClass)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> JdkDynamicAopProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(config)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用 CGLIB</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ObjenesisCglibAopProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(config)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用 JDK动态代理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> JdkDynamicAopProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(config)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外 <code>AopProxy</code> 也是一个策略接口类，具体实现的策略为 <code>JdkDynamicAopProxy</code>，<code>CglibAopProxy</code>，<code>ObjenesisCglibAopProxy</code></p><h3 id="tomcat-中-digester-解析-server-xml" tabindex="-1"><a class="header-anchor" href="#tomcat-中-digester-解析-server-xml"><span>Tomcat 中 <code>Digester</code> 解析 <code>server.xml</code></span></a></h3><p>Tomcat 中的 <code>Digester</code> 是为了解析 <code>server.xml</code> 的，其中每个元素都有一个解析规则就是 <code>Rule</code>，<code>DigestER</code> 一开始先指定不同的解析策略（<code>Rule</code>），然后在具体解析 <code>server.xml</code> 时候根据节点不同使用不同解析策略来解析节点。</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-2ef6c46b46d18914.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图在解析每个节点时候会先找到该节点对应的解析策略，然后循环去调用所有解析策略的方法去处理。</p><h3 id="使用场景-4" tabindex="-1"><a class="header-anchor" href="#使用场景-4"><span>使用场景</span></a></h3><p>运行时根据条件的不同使用不同的策略处理一个事情，与责任链不同在于，责任链是一个链条，一个事情可以被责任链里面所有节点处理，而 策略模式则是只有有一个对象来处理。</p><h2 id="七、门面模式-facade-pattern" tabindex="-1"><a class="header-anchor" href="#七、门面模式-facade-pattern"><span>七、门面模式（Facade Pattern）</span></a></h2><h3 id="介绍-5" tabindex="-1"><a class="header-anchor" href="#介绍-5"><span>介绍</span></a></h3><p>门面模式是一种结构性模式，它通过新增一个门面类对外暴露系统提供的一部分功能，或者屏蔽了内部系统的复杂性，对外部仅仅暴露一个简单的接口，或者通过调用不同的服务对外提供统一的接口，让使用者对这些内部服务透明化。</p><h3 id="模板引擎-velocity-中门面模式使用" tabindex="-1"><a class="header-anchor" href="#模板引擎-velocity-中门面模式使用"><span>模板引擎 Velocity 中门面模式使用</span></a></h3><p>Velocity 里面的 <code>VelocityEngine</code> 和 <code>Velocity</code> 类都是 <code>RuntimeInstance</code> 类的门面，后者提供了模板渲染的所有功能，前两者则是内部维护 <code>RuntimeInstance</code> 的实例，具体工作还是委托给 <code>RuntimeInstance</code> 来实现。</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-66c15140bfe5ad36.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图 <code>RuntimeInstance</code> 提供了 <code>Velocity</code> 引擎的所用功能，<code>VelocityEngine</code> 内部直接引用了 <code>RuntimeInstance</code> 的一个实例，<code>VelocityEngine</code> 对外暴露的服务都是委托 <code>RuntimeInstance</code> 实现，并且每次 <code>new</code> 一个 <code>VelocityEngine</code> 内部都会有 <code>RuntimeInstance</code> 的一个实例被创建。而 <code>Velocity</code> 类调用了单例模式类 <code>RuntimeSingleton</code> 里面的方法，<code>RuntimeSingleton</code> 又是 <code>RuntimeInstance</code> 的一个单例模式。</p><h3 id="使用场景-5" tabindex="-1"><a class="header-anchor" href="#使用场景-5"><span>使用场景</span></a></h3><ul><li>当需要对外屏蔽一个系统的复杂性时候可以考虑使用门面模式对外提供简单可读性高的接口类</li><li>当需要对外部暴露系统一部分权限的接口时候可以考虑使用门面模式减少系统权限。</li><li>当系统需要调用不同服务汇总后在对外提供服务时候可以考虑使用门面模式对外屏蔽细节，之暴露一个接口。</li></ul><h2 id="八、装饰器模式-decorator-pattern" tabindex="-1"><a class="header-anchor" href="#八、装饰器模式-decorator-pattern"><span>八、装饰器模式（Decorator Pattern）</span></a></h2><h3 id="介绍-6" tabindex="-1"><a class="header-anchor" href="#介绍-6"><span>介绍</span></a></h3><p>装饰器模式是一种结构性模式，它作用是对对象已有功能进行增强，但是不改变原有对象结构。这避免了通过继承方式进行功能扩充导致的类体系臃肿。</p><h3 id="spring-中-beandefinitiondecorator" tabindex="-1"><a class="header-anchor" href="#spring-中-beandefinitiondecorator"><span>Spring 中 BeanDefinitionDecorator</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-f9a9a083d138e9d0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图 <code>ScopedProxyBeanDefinitionDecorator</code> 实现了 <code>decorate</code> 方法用来对 <code>scope</code> 作用域为 <code>request</code> 的 <code>bean</code> 定义进行包装。具体时序图为：</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-cab488a963d04657.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ScopedProxyBeanDefinitionDecorator</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeanDefinitionDecorator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PROXY_TARGET_CLASS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;proxy-target-class&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeanDefinitionHolder</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> decorate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeanDefinitionHolder</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> definition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ParserContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> parserContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> proxyTargetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Element) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ele</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Element) node;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ele</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PROXY_TARGET_CLASS)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                proxyTargetClass </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ele</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PROXY_TARGET_CLASS));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建scoped的代理类，并注册到容器</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        BeanDefinitionHolder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> holder</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                ScopedProxyUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createScopedProxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(definition, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">parserContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRegistry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), proxyTargetClass);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> targetBeanName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ScopedProxyUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTargetBeanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">definition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBeanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        parserContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getReaderContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fireComponentRegistered</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BeanComponentDefinition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">definition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBeanDefinition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), targetBeanName));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> holder;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 <code>ScopedProxyBeanDefinitionDecorator</code> 干啥用的呢：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bean</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lavaPvgInfo&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.alibaba.lava.privilege.PrivilegeInfo&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;request&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;aesKey&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;666&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">aop:scoped-proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是处理 <code>&lt;aop:scoped-proxy /&gt;</code> 的，具体作用是包装 <code>lavaPvgInfo</code> 的 <code>bean</code> 定义为 <code>ScopedProxyFactoryBean</code>，作用是实现 <code>request</code> 作用域 <code>bean</code></p><h3 id="commons-collections-包中-listutils" tabindex="-1"><a class="header-anchor" href="#commons-collections-包中-listutils"><span>commons-collections 包中 ListUtils</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-afa39758e0c2213d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>ListUtils</code> 中的四个方法分别依赖 <code>list</code> 的四种装饰器类对 <code>List</code> 功能进行扩充和限制。</li><li>其中 <code>FixedSizeList</code> 类通过禁止 <code>add/remove</code> 操作保证 <code>list</code> 的大小固定，但是可以修改元素内容</li><li>其中 <code>UnmodifiableList</code> 类通过禁用 <code>add</code>, <code>clear</code>, <code>remove</code>, <code>set</code>,保证 <code>list</code> 的内容不被修改</li><li>其中 <code>SynchronizedList</code> 类通过使用 <code>Lock</code> 来保证 <code>add</code>, <code>set</code>, <code>get</code>, <code>remove</code> 等的同步安全</li><li>其中 <code>LazyList</code> 类则当调用 <code>get</code> 方法发现 <code>list</code> 里面不存在对象时候，自动使用 <code>factory</code> 创建对象.</li></ul><h3 id="使用场景-6" tabindex="-1"><a class="header-anchor" href="#使用场景-6"><span>使用场景</span></a></h3><p>在不改变原有类结构基础上，新增或者限制或者改造功能时候。</p><h2 id="九、适配器模式-adapter-pattern" tabindex="-1"><a class="header-anchor" href="#九、适配器模式-adapter-pattern"><span>九、适配器模式（Adapter Pattern）</span></a></h2><h3 id="介绍-7" tabindex="-1"><a class="header-anchor" href="#介绍-7"><span>介绍</span></a></h3><p>适配器模式属于结构性模式，它为两个不同接口之间互通提供了一种手段。</p><h3 id="spring-中-methodinterceptor-适配器" tabindex="-1"><a class="header-anchor" href="#spring-中-methodinterceptor-适配器"><span>Spring 中 MethodInterceptor 适配器</span></a></h3><p>在 Spring Aop 框架中，<code>MethodInterceptor</code> 接口被用来拦截指定的方法，对方法进行增强。</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-5eacbfe80fc60237.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>大家都知道在 <code>AOP</code> 中每个 <code>advistor</code> 里面会有一个 <code>advice</code> 具体做切面动作，Spring 提供了 <code>AspectJAfterReturningAdvice</code>，<code>AspectJMethodBeforeAdvice</code>，<code>AspectJAroundAdvice</code>，<code>AspectJAfterAdvice</code> 这几个 <code>advice</code>,在 <code>XML</code> 配置 <code>AOP</code> 时候会指定 <code>&lt;aop:after-returning/&gt;</code>, <code>&lt;aop:before/&gt;</code>, <code>&lt;aop:around/&gt;</code>, <code>&lt;aop:after/&gt;</code>, 其实内部就是创建上面对应的这些 <code>advice</code>。</p><p>从图知道 <code>AspectJAfterReturningAdvice</code> 和 <code>AspectJMethodBeforeAdvice</code> 没有实现 <code>MethodInterceptor</code> 接口，其他两者则实现了该接口。而 Spring Aop 的方法拦截器却必须是实现了 <code>MethodInterceptor</code> 的，所以 Spring 提供了对应的适配器来适配这个问题,分别是 <code>MethodBeforeAdviceAdapter</code> 和 <code>AfterReturningAdviceAdapter</code> 和 <code>ThrowsAdviceAdapter</code>。</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-072d44bda8af7ef9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>看下 <code>DefaultAdvisorAdapterRegistry</code> 的 <code>getInterceptors</code> 方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MethodInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInterceptors</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Advisor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> advisor) throws UnknownAdviceTypeException {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MethodInterceptor</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> interceptors </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MethodInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //从advistor中获取advice</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Advice</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> advice </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> advisor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAdvice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //如果实现了MethodInterceptor则直接加入，比如AspectJAroundAdvice，AspectJAfterAdvice</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (advice </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> MethodInterceptor) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        interceptors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((MethodInterceptor) advice);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //否者看是否有当前advice的适配器，首先检验是否支持，支持则返回对应的适配器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AdvisorAdapter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> adapter </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">adapters</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">adapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supportsAdvice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(advice)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            interceptors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">adapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(advisor));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">interceptors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UnknownAdviceTypeException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">advisor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAdvice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> interceptors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MethodInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">interceptors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 <code>MethodBeforeAdviceAdapter</code> 为例子看下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MethodBeforeAdviceAdapter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AdvisorAdapter</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Serializable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> supportsAdvice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Advice</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> advice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (advice </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MethodBeforeAdvice);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MethodInterceptor</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Advisor</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> advisor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        MethodBeforeAdvice</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> advice</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (MethodBeforeAdvice) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">advisor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAdvice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MethodBeforeAdviceInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(advice);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MethodBeforeAdviceInterceptor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MethodInterceptor</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Serializable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MethodBeforeAdvice</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> advice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * Create a new MethodBeforeAdviceInterceptor for the given advice.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> advice</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> the MethodBeforeAdvice to wrap</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MethodBeforeAdviceInterceptor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MethodBeforeAdvice</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> advice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">notNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(advice, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Advice must not be null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">advice</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> advice;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MethodInvocation</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Throwable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">advice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">before</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getArguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getThis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() );</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> mi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">proceed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可知 <code>MethodBeforeAdviceInterceptor</code> 继承了 <code>MethodInterceptor</code> 作为了一个适配器内部委托请求给 <code>MethodBeforeAdvice</code>。</p><h3 id="使用场景-7" tabindex="-1"><a class="header-anchor" href="#使用场景-7"><span>使用场景</span></a></h3><ul><li>两个系统交互时候由于接口参数不一样没办法直接对接，则可以搞个适配器接口做参数转换。</li><li>适配器模式经常是在一个系统或者设计已经定型时候用的，而不是在初始设计时候。一般是因为不影响现在业务情况下，通过适配方式统一接口</li></ul><h2 id="十、模板方法模式-template-pattern" tabindex="-1"><a class="header-anchor" href="#十、模板方法模式-template-pattern"><span>十、模板方法模式（Template Pattern）</span></a></h2><h3 id="介绍-8" tabindex="-1"><a class="header-anchor" href="#介绍-8"><span>介绍</span></a></h3><p>模板设计模式是一种行为设计模式，它使用一个抽象类定义了一个模板，这个模板里面定义了一系列的接口，子类则只需要继承该抽象类并且根据需要重写一部分接口。</p><h3 id="ibatis2-中-abstractdaotemplate" tabindex="-1"><a class="header-anchor" href="#ibatis2-中-abstractdaotemplate"><span>ibatis2 中 AbstractDAOTemplate</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-27b737718c1a71bc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图 <code>AbstractDAOTemplate</code> 是抽象模板类，里面定义了 <code>configure</code> 方法，<code>configure</code> 方法里面定义了好多 <code>protected</code> 方法，其中就有些是抽象方法。类 <code>SpringDAOTemplate</code>，<code>IbatisDAOTemplate</code>，<code>GenericCIDAOTemplate</code>，<code>GenericSIDAOTemplate</code> 则继承了 <code>AbstractDAOTemplate</code> 类并重写了一部分方法。</p><h3 id="tomcat-中-digester-里面的-rule" tabindex="-1"><a class="header-anchor" href="#tomcat-中-digester-里面的-rule"><span>Tomcat 中 Digester 里面的 Rule</span></a></h3><p>Tomcat 中的 <code>Digester</code> 是为了解析 <code>server.xml</code> 的，其中每个元素都有一个解析规则就是 <code>Rule</code> ,类图如下：</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-d5e4f335d709ab29.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图：Rule 是抽象类，对于每个解析的节点来说 Rule 提供了解析所需所有的方法，而他的子类则根据自己的特殊性重写一部分方法来支持自己的特性。</p><h3 id="tomcat-中-endpoint" tabindex="-1"><a class="header-anchor" href="#tomcat-中-endpoint"><span>Tomcat 中 Endpoint</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-bd4bb3f72e7da976.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图 <code>AbstractEndpoint</code> 是个抽象类，定义了 <code>Endpoint</code> 的所有接口，然后 <code>JIoEndpoint</code> 继承了该类并且重写了一部分重要的方法实现了 <code>BIO</code> 方式 <code>endpoint</code> , <code>NioEndpoint</code> 则重写了方法实现了 <code>NIO</code> 的 <code>endpoint</code>.</p><h3 id="使用场景-8" tabindex="-1"><a class="header-anchor" href="#使用场景-8"><span>使用场景</span></a></h3><p>当多个子类具有共同的操作流程逻辑，并且其中某些流程节点操作需要自己定制化时候。</p><h2 id="十一、建造者模式-builder-pattern" tabindex="-1"><a class="header-anchor" href="#十一、建造者模式-builder-pattern"><span>十一、建造者模式（Builder Pattern）</span></a></h2><h3 id="介绍-9" tabindex="-1"><a class="header-anchor" href="#介绍-9"><span>介绍</span></a></h3><p>建造者模式是一种创建型模式，将一个复制对象的创建屏蔽到接口内部，用户使用时候只需要传递固定的参数，内部就会执行复杂逻辑后返回会用户需要的对象，用户不需要知道创建的细节。</p><h3 id="mybatis-中的-sqlsessionfactorybuilder" tabindex="-1"><a class="header-anchor" href="#mybatis-中的-sqlsessionfactorybuilder"><span>Mybatis 中的 SqlSessionFactoryBuilder</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-96342ae1a578c8c6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图 <code>MyBaits</code> 中的 <code>SqlSessionFactoryBuilder</code> 就是典型的创建者模式，他内部有多个 <code>build</code> 方法，根据参数的不同创建出 <code>SqlSessionFactory</code> 对象，使用者只需要传递具体参数而不用关系内部是如何创建出需要的对象的。<code>SqlSessionFactoryBean</code> 大家应该很熟悉，在 <code>xml</code> 里面配置的。</p><h3 id="使用场景-9" tabindex="-1"><a class="header-anchor" href="#使用场景-9"><span>使用场景</span></a></h3><p>当一个对象比较复杂并且容易出错时候，可以考虑这种模式去屏蔽创造细节。</p><h2 id="十二、观察者模式-observer-pattern" tabindex="-1"><a class="header-anchor" href="#十二、观察者模式-observer-pattern"><span>十二、观察者模式（Observer Pattern）</span></a></h2><h3 id="介绍-10" tabindex="-1"><a class="header-anchor" href="#介绍-10"><span>介绍</span></a></h3><p>观察者模式是一种行为模式，它定义了当一个对象的状态或者属性发生变化时候，通通知其他对这些状态感兴趣的对象。观察者模式也叫发布-订阅模式，就是说当你订阅了摸一个主体时候，如果发布者改变了主题内容，那么所有订阅这个主体者都会受到通知。</p><h3 id="spring-中-applicationlistener" tabindex="-1"><a class="header-anchor" href="#spring-中-applicationlistener"><span>Spring 中 ApplicationListener</span></a></h3><figure><img src="https://pic.sansei.top/images/designmodel/5879294-eee8a0c0437a83d5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如图 黄色部分的 <code>listener</code> 们可以认为是订阅者，红色的 <code>context</code> 是发布者，<code>context</code> 在 <code>IOC</code> 不同状态会给这些订阅者发布不同的消息通知订阅者容器状态。蓝色的为具体的事件（这里为容器不同状态），其中 <code>ContextRefreshedEvent</code> 是 <code>IOC</code> 刷新完成（也就是 <code>bean</code> 解析完成，创建完毕并且 <code>autowired</code> 完成）后的事件这个经常用。 。这里 <code>context</code> 并不是直接来管理黄色的 <code>listener</code> 订阅者的，而是委托给了绿色的部分，该部分是可以增加删除订阅者，并且发布事件给订阅者。</p><p>其实 Tomcat 中的 <code>Lifecycle</code> 也是这种机制</p><h3 id="使用场景-10" tabindex="-1"><a class="header-anchor" href="#使用场景-10"><span>使用场景</span></a></h3><p>满足发布-订阅条件的，当一个对象状态或者属性变化，需要把这种变化通知到订阅者时候。</p><h2 id="十三、命令模式-command-pattern" tabindex="-1"><a class="header-anchor" href="#十三、命令模式-command-pattern"><span>十三、命令模式（Command Pattern）</span></a></h2><h3 id="介绍-11" tabindex="-1"><a class="header-anchor" href="#介绍-11"><span>介绍</span></a></h3><p>命令模式是一种行为模式，通过把命令封装为一个对象，命令发送者把命令对象发出后，就不去管是谁来接受处理这个命令，命令接受者接受到命令对象后进行处理，也不用管命令是谁发出的，所以命令模式实现了发送者与接受者之间的解耦，而具体把命令发送给谁还需要一个控制器。</p><h3 id="tomcat-中命令模式" tabindex="-1"><a class="header-anchor" href="#tomcat-中命令模式"><span>Tomcat 中命令模式</span></a></h3><p>Tomcat 作为一个服务器本身会接受外部大量请求，当一个请求过来后 Tomcat 根据域名去找对应的 <code>host</code>,找到 <code>host</code> 后会根据应用名去找具体的 context(应用)，然后具体应用处理请求。对于具体 <code>host</code> 来说他不关心这个请求是谁给的，对应请求来说他不必关心谁来处理，但是两者是通过 <code>request</code> 封装请求对象进行关联起来。</p><figure><img src="https://pic.sansei.top/images/designmodel/5879294-f9e90281b20fe688.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Tomcat 中 <code>Connector</code> 作为命令发出者，<code>Connector</code> 接受到请求后把请求内容封装为 <code>request</code> 对象（命令对象），然后使用 <code>CoyoteAdapter</code> 作为分发器把请求具体发配到具体的 <code>host</code>, <code>host</code> 在根据 <code>request</code> 对象找到具体的 <code>context</code>,至此找到了具体的应用，交给具体应用处理。</p><p>另外对于使用 <code>SpringMVC</code> 的应用来说，上面找到具体应用，但是具体交给那个 <code>controller</code> 来处理那，这是不是也是命令模式的使用那。</p><h3 id="使用场景-11" tabindex="-1"><a class="header-anchor" href="#使用场景-11"><span>使用场景</span></a></h3><p>当事件发送者和接受者直接需要完全解耦（直接并不存在引用关系）时候。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>设计模式中每一个模式都描述了在我们工作中不断重复发生的问题，以及问题的解决方案，所以真正掌握设计模式可以避免我们做不必要的重复劳动。</p>`,159)]))}const d=s(l,[["render",t],["__file","Java-Design-Model1.html.vue"]]),r=JSON.parse('{"path":"/audition/design/Java-Design-Model1.html","title":"说说常用开源框架中设计模式使用分析","lang":"zh-CN","frontmatter":{"description":"说说常用开源框架中设计模式使用分析 一、前言 设计模式代表了软件设计的最佳实践，是经过不断总结提炼出来的代码设计经验的分类总结，这些模式或者可以简化代码，或者可以是代码逻辑开起来清晰，或者对功能扩展很方便 设计模式按照使用场景可以分为三大类： 创建型模式（Creational Patterns）：对对象的实例化过程进行抽象，这使得一个系统可以不用关心这...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/audition/design/Java-Design-Model1.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"说说常用开源框架中设计模式使用分析"}],["meta",{"property":"og:description","content":"说说常用开源框架中设计模式使用分析 一、前言 设计模式代表了软件设计的最佳实践，是经过不断总结提炼出来的代码设计经验的分类总结，这些模式或者可以简化代码，或者可以是代码逻辑开起来清晰，或者对功能扩展很方便 设计模式按照使用场景可以分为三大类： 创建型模式（Creational Patterns）：对对象的实例化过程进行抽象，这使得一个系统可以不用关心这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.sansei.top/images/designmodel/5879294-bf812e77605ba1a3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T10:19:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T10:19:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说说常用开源框架中设计模式使用分析\\",\\"image\\":[\\"https://pic.sansei.top/images/designmodel/5879294-bf812e77605ba1a3.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-51ec28c227c785bd.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-a7ecb943aa15c858.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-2d102832375148ef.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-3013e4bf12ef0274.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-24f08d52b6fc7fba.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-7e0b0badc2deef53.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-2ef6c46b46d18914.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-66c15140bfe5ad36.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-f9a9a083d138e9d0.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-cab488a963d04657.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-afa39758e0c2213d.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-5eacbfe80fc60237.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-072d44bda8af7ef9.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-27b737718c1a71bc.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-d5e4f335d709ab29.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-bd4bb3f72e7da976.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-96342ae1a578c8c6.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-eee8a0c0437a83d5.png\\",\\"https://pic.sansei.top/images/designmodel/5879294-f9e90281b20fe688.png\\"],\\"dateModified\\":\\"2025-01-16T10:19:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、前言","slug":"一、前言","link":"#一、前言","children":[]},{"level":2,"title":"二、责任链设计模式（Chain of Responsibility Pattern）","slug":"二、责任链设计模式-chain-of-responsibility-pattern","link":"#二、责任链设计模式-chain-of-responsibility-pattern","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"Tomcat 中 Valve 链","slug":"tomcat-中-valve-链","link":"#tomcat-中-valve-链","children":[]},{"level":3,"title":"Tomcat 中 Filter 链","slug":"tomcat-中-filter-链","link":"#tomcat-中-filter-链","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"三、工厂模式（Factory Pattern）","slug":"三、工厂模式-factory-pattern","link":"#三、工厂模式-factory-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":3,"title":"Spring 框架中 BeanFactory","slug":"spring-框架中-beanfactory","link":"#spring-框架中-beanfactory","children":[]},{"level":3,"title":"举个例子","slug":"举个例子","link":"#举个例子","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-1","link":"#使用场景-1","children":[]}]},{"level":2,"title":"四、单例设计模式（Singleton Pattern）","slug":"四、单例设计模式-singleton-pattern","link":"#四、单例设计模式-singleton-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-2","link":"#介绍-2","children":[]},{"level":3,"title":"Spring 中单例 Bean 的创建","slug":"spring-中单例-bean-的创建","link":"#spring-中单例-bean-的创建","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-2","link":"#使用场景-2","children":[]}]},{"level":2,"title":"五、原型设计模式（Prototype Pattern）","slug":"五、原型设计模式-prototype-pattern","link":"#五、原型设计模式-prototype-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-3","link":"#介绍-3","children":[]},{"level":3,"title":"Spring 中原型 bean 的创建","slug":"spring-中原型-bean-的创建","link":"#spring-中原型-bean-的创建","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-3","link":"#使用场景-3","children":[]}]},{"level":2,"title":"六、策略模式（Strategy Pattern）","slug":"六、策略模式-strategy-pattern","link":"#六、策略模式-strategy-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-4","link":"#介绍-4","children":[]},{"level":3,"title":"Spring 中 bean 实例化策略","slug":"spring-中-bean-实例化策略","link":"#spring-中-bean-实例化策略","children":[]},{"level":3,"title":"Spring 中 AOP 代理策略","slug":"spring-中-aop-代理策略","link":"#spring-中-aop-代理策略","children":[]},{"level":3,"title":"Tomcat 中 Digester 解析 server.xml","slug":"tomcat-中-digester-解析-server-xml","link":"#tomcat-中-digester-解析-server-xml","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-4","link":"#使用场景-4","children":[]}]},{"level":2,"title":"七、门面模式（Facade Pattern）","slug":"七、门面模式-facade-pattern","link":"#七、门面模式-facade-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-5","link":"#介绍-5","children":[]},{"level":3,"title":"模板引擎 Velocity 中门面模式使用","slug":"模板引擎-velocity-中门面模式使用","link":"#模板引擎-velocity-中门面模式使用","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-5","link":"#使用场景-5","children":[]}]},{"level":2,"title":"八、装饰器模式（Decorator Pattern）","slug":"八、装饰器模式-decorator-pattern","link":"#八、装饰器模式-decorator-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-6","link":"#介绍-6","children":[]},{"level":3,"title":"Spring 中 BeanDefinitionDecorator","slug":"spring-中-beandefinitiondecorator","link":"#spring-中-beandefinitiondecorator","children":[]},{"level":3,"title":"commons-collections 包中 ListUtils","slug":"commons-collections-包中-listutils","link":"#commons-collections-包中-listutils","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-6","link":"#使用场景-6","children":[]}]},{"level":2,"title":"九、适配器模式（Adapter Pattern）","slug":"九、适配器模式-adapter-pattern","link":"#九、适配器模式-adapter-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-7","link":"#介绍-7","children":[]},{"level":3,"title":"Spring 中 MethodInterceptor 适配器","slug":"spring-中-methodinterceptor-适配器","link":"#spring-中-methodinterceptor-适配器","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-7","link":"#使用场景-7","children":[]}]},{"level":2,"title":"十、模板方法模式（Template Pattern）","slug":"十、模板方法模式-template-pattern","link":"#十、模板方法模式-template-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-8","link":"#介绍-8","children":[]},{"level":3,"title":"ibatis2 中 AbstractDAOTemplate","slug":"ibatis2-中-abstractdaotemplate","link":"#ibatis2-中-abstractdaotemplate","children":[]},{"level":3,"title":"Tomcat 中 Digester 里面的 Rule","slug":"tomcat-中-digester-里面的-rule","link":"#tomcat-中-digester-里面的-rule","children":[]},{"level":3,"title":"Tomcat 中 Endpoint","slug":"tomcat-中-endpoint","link":"#tomcat-中-endpoint","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-8","link":"#使用场景-8","children":[]}]},{"level":2,"title":"十一、建造者模式（Builder Pattern）","slug":"十一、建造者模式-builder-pattern","link":"#十一、建造者模式-builder-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-9","link":"#介绍-9","children":[]},{"level":3,"title":"Mybatis 中的 SqlSessionFactoryBuilder","slug":"mybatis-中的-sqlsessionfactorybuilder","link":"#mybatis-中的-sqlsessionfactorybuilder","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-9","link":"#使用场景-9","children":[]}]},{"level":2,"title":"十二、观察者模式（Observer Pattern）","slug":"十二、观察者模式-observer-pattern","link":"#十二、观察者模式-observer-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-10","link":"#介绍-10","children":[]},{"level":3,"title":"Spring 中 ApplicationListener","slug":"spring-中-applicationlistener","link":"#spring-中-applicationlistener","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-10","link":"#使用场景-10","children":[]}]},{"level":2,"title":"十三、命令模式（Command Pattern）","slug":"十三、命令模式-command-pattern","link":"#十三、命令模式-command-pattern","children":[{"level":3,"title":"介绍","slug":"介绍-11","link":"#介绍-11","children":[]},{"level":3,"title":"Tomcat 中命令模式","slug":"tomcat-中命令模式","link":"#tomcat-中命令模式","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-11","link":"#使用场景-11","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1737022746000,"updatedTime":1737022746000,"contributors":[{"name":"cangbao","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":17.93,"words":5379},"filePathRelative":"audition/design/Java-Design-Model1.md","localizedDate":"2025年1月16日","autoDesc":true}');export{d as comp,r as data};
