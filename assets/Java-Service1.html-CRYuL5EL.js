import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,o as r}from"./app-CSRNZOmr.js";const o={};function n(c,e){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="前后端分离是如何做的" tabindex="-1"><a class="header-anchor" href="#前后端分离是如何做的"><span>前后端分离是如何做的</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在前后端分离架构中，后端只需要负责按照约定的数据格式向前端提供可调用的 API 服务即可。前后端之间通过 HTTP 请求进行交互，前端获取到数据后，进行页面的组装和渲染，最终返回给浏览器。</p><h2 id="如何解决跨域" tabindex="-1"><a class="header-anchor" href="#如何解决跨域"><span>如何解决跨域</span></a></h2><h3 id="什么是跨域问题" tabindex="-1"><a class="header-anchor" href="#什么是跨域问题"><span>什么是跨域问题？</span></a></h3><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对 JavaScript 施加的安全限制。</p><h3 id="什么是同源" tabindex="-1"><a class="header-anchor" href="#什么是同源"><span>什么是同源？</span></a></h3><p>所谓同源是指，域名，协议，端口均相同</p><ul><li>http://www.baidu.com --&gt; http://admin.baidu.com 跨域</li><li>http://www.baidu.com --&gt; http://www.baidu.com 非跨域</li><li>http://www.baidu.com --&gt; http://www.baidu.com:8080 跨域</li><li>http://www.baidu.com --&gt; https://www.baidu.com 跨域</li></ul><h3 id="使用-cors-跨资源共享-解决跨域问题" tabindex="-1"><a class="header-anchor" href="#使用-cors-跨资源共享-解决跨域问题"><span>使用 CORS（跨资源共享）解决跨域问题</span></a></h3><p>CORS 是一个 W3C 标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p><p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10</p><p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉</p><p>因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信</p><h3 id="cors-与-jsonp-的比较" tabindex="-1"><a class="header-anchor" href="#cors-与-jsonp-的比较"><span>CORS 与 JSONP 的比较</span></a></h3><p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。</p><p>JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</p>',17)]))}const l=t(o,[["render",n]]),d=JSON.parse('{"path":"/audition/microservices/Java-Service1.html","title":"前后端分离是如何做的","lang":"zh-CN","frontmatter":{"description":"前后端分离是如何做的 概述 在前后端分离架构中，后端只需要负责按照约定的数据格式向前端提供可调用的 API 服务即可。前后端之间通过 HTTP 请求进行交互，前端获取到数据后，进行页面的组装和渲染，最终返回给浏览器。 如何解决跨域 什么是跨域问题？ 跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对 JavaScript...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/audition/microservices/Java-Service1.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"前后端分离是如何做的"}],["meta",{"property":"og:description","content":"前后端分离是如何做的 概述 在前后端分离架构中，后端只需要负责按照约定的数据格式向前端提供可调用的 API 服务即可。前后端之间通过 HTTP 请求进行交互，前端获取到数据后，进行页面的组装和渲染，最终返回给浏览器。 如何解决跨域 什么是跨域问题？ 跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对 JavaScript..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-11T09:54:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-11T09:54:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前后端分离是如何做的\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-11T09:54:05.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"如何解决跨域","slug":"如何解决跨域","link":"#如何解决跨域","children":[{"level":3,"title":"什么是跨域问题？","slug":"什么是跨域问题","link":"#什么是跨域问题","children":[]},{"level":3,"title":"什么是同源？","slug":"什么是同源","link":"#什么是同源","children":[]},{"level":3,"title":"使用 CORS（跨资源共享）解决跨域问题","slug":"使用-cors-跨资源共享-解决跨域问题","link":"#使用-cors-跨资源共享-解决跨域问题","children":[]},{"level":3,"title":"CORS 与 JSONP 的比较","slug":"cors-与-jsonp-的比较","link":"#cors-与-jsonp-的比较","children":[]}]}],"git":{"createdTime":1749635645000,"updatedTime":1749635645000,"contributors":[{"name":"cangbao","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":1.66,"words":497},"filePathRelative":"audition/microservices/Java-Service1.md","localizedDate":"2025年6月11日","autoDesc":true}');export{l as comp,d as data};
