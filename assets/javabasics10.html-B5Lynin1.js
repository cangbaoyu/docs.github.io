import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as o,o as n}from"./app-BasagXBN.js";const a={};function t(l,e){return n(),i("div",null,e[0]||(e[0]=[o('<h1 id="session-分布式处理" tabindex="-1"><a class="header-anchor" href="#session-分布式处理"><span>session 分布式处理</span></a></h1><h2 id="session-复制" tabindex="-1"><a class="header-anchor" href="#session-复制"><span>Session 复制</span></a></h2><p>在支持 Session 复制的 Web 服务器上，通过修改 Web 服务器的配置，可以实现将 Session 同步到其它 Web 服务器上，达到每个 Web 服务器上都保存一致的 Session。</p><ul><li>优点：代码上不需要做支持和修改。</li><li>缺点：需要依赖支持的 Web 服务器，一旦更换成不支持的 Web 服务器就不能使用了，在数据量很大的情况下不仅占用网络资源，而且会导致延迟。</li><li>适用场景：只适用于Web服务器比较少且 Session 数据量少的情况。</li><li>可用方案：开源方案 <code>tomcat-redis-session-manager</code>，暂不支持 <code>Tomcat8</code>。</li></ul><h2 id="session-粘滞" tabindex="-1"><a class="header-anchor" href="#session-粘滞"><span>Session 粘滞</span></a></h2><p>将用户的每次请求都通过某种方法强制分发到某一个 Web 服务器上，只要这个 Web 服务器上存储了对应 Session 数据，就可以实现会话跟踪。</p><ul><li>优点：使用简单，没有额外开销。</li><li>缺点：一旦某个 Web 服务器重启或宕机，相对应的 Session 数据将会丢失，而且需要依赖负载均衡机制。</li><li>适用场景：对稳定性要求不是很高的业务情景。</li></ul><h2 id="session-集中管理" tabindex="-1"><a class="header-anchor" href="#session-集中管理"><span>Session 集中管理</span></a></h2><p>在单独的服务器或服务器集群上使用缓存技术，如 Redis 存储 Session 数据，集中管理所有的 Session，所有的Web服务器都从这个存储介质中存取对应的 Session，实现 Session 共享。</p><ul><li>优点：可靠性高，减少 Web 服务器的资源开销。</li><li>缺点：实现上有些复杂，配置较多。</li><li>适用场景：Web服务器较多、要求高可用性的情况。</li><li>可用方案：开源方案 <code>Spring Session</code>，也可以自己实现，主要是重写 <code>HttpServletRequestWrapper</code> 中的 <code>getSession</code> 方法。</li></ul><h2 id="基于-cookie-管理" tabindex="-1"><a class="header-anchor" href="#基于-cookie-管理"><span>基于 Cookie 管理</span></a></h2><p>这种方式每次发起请求的时候都需要将 Session 数据放到 Cookie 中传递给服务端。</p><ul><li>优点：不需要依赖额外外部存储，不需要额外配置。</li><li>缺点：不安全，易被盗取或篡改；Cookie 数量和长度有限制，需要消耗更多网络带宽。</li><li>适用场景：数据不重要、不敏感且数据量小的情况。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这四种方式，相对来说，<strong>Session 集中管理</strong> 更加可靠，使用也是最多的。</p>',15)]))}const p=s(a,[["render",t]]),d=JSON.parse('{"path":"/audition/javabase/javabasics10.html","title":"session 分布式处理","lang":"zh-CN","frontmatter":{"description":"session 分布式处理 Session 复制 在支持 Session 复制的 Web 服务器上，通过修改 Web 服务器的配置，可以实现将 Session 同步到其它 Web 服务器上，达到每个 Web 服务器上都保存一致的 Session。 优点：代码上不需要做支持和修改。 缺点：需要依赖支持的 Web 服务器，一旦更换成不支持的 Web 服务器...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/audition/javabase/javabasics10.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"session 分布式处理"}],["meta",{"property":"og:description","content":"session 分布式处理 Session 复制 在支持 Session 复制的 Web 服务器上，通过修改 Web 服务器的配置，可以实现将 Session 同步到其它 Web 服务器上，达到每个 Web 服务器上都保存一致的 Session。 优点：代码上不需要做支持和修改。 缺点：需要依赖支持的 Web 服务器，一旦更换成不支持的 Web 服务器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-05T15:37:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-05T15:37:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"session 分布式处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-05T15:37:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Session 复制","slug":"session-复制","link":"#session-复制","children":[]},{"level":2,"title":"Session 粘滞","slug":"session-粘滞","link":"#session-粘滞","children":[]},{"level":2,"title":"Session 集中管理","slug":"session-集中管理","link":"#session-集中管理","children":[]},{"level":2,"title":"基于 Cookie 管理","slug":"基于-cookie-管理","link":"#基于-cookie-管理","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1754408237000,"updatedTime":1754408237000,"contributors":[{"name":"cangbao","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":1.93,"words":579},"filePathRelative":"audition/javabase/javabasics10.md","localizedDate":"2025年8月5日","autoDesc":true}');export{p as comp,d as data};
