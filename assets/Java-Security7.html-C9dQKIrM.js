import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,o as e}from"./app-qlBYsuIT.js";const l={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[i('<h1 id="基于角色的访问控制" tabindex="-1"><a class="header-anchor" href="#基于角色的访问控制"><span>基于角色的访问控制</span></a></h1><p>以角色为基础的访问控制（Role-based access control, RBAC），是资讯安全领域中，一种较新且广为使用的访问控制机制，其不同于强制访问控制以及自由选定访问控制直接赋予使用者权限，而是将权限赋予角色。是一套较强制访问控制以及自由选定访问控制更为中性且更具灵活性的访问控制技术。</p><h2 id="什么是-rbac" tabindex="-1"><a class="header-anchor" href="#什么是-rbac"><span>什么是 RBAC</span></a></h2><p>RBAC 模型的基本思想是将访问许可权分配给一定的角色，用户通过饰演不同的角色获得角色所拥有的访问许可权。</p><p>访问控制可以简单表述为：判断谁（Who）对什么（What/Which）进行怎样（How）的操作是否为真。</p><p>在 RBAC 中，用户的权限不是在用户本身上进行管理的，用户的权限是由用户所处的角色所决定的。在权限管理中，通过角色这一桥梁将用户与权限联系起来。用户和角色、角色与权限是一个多对多的关系。</p><p>与 RBAC 访问控制相关的概念有：</p><ol><li>用户（User）：一个具有唯一标识符的用户，与权限相分离，只能通过所属的 Role 去关联权限，一个用户可以拥有多项角色；</li><li>角色（Role）:一定数量的权限的集合，角色可以继承，一个角色对应多项权限；</li><li>权限（Resource）：也可以看作是资源，它对应了应用系统中的一个功能；</li></ol><h2 id="设计对应的数据表结构" tabindex="-1"><a class="header-anchor" href="#设计对应的数据表结构"><span>设计对应的数据表结构</span></a></h2><p>这里使用的是 ThinkPHP 的表结构，字段设置符合功能的设计要求。</p><h3 id="用户表" tabindex="-1"><a class="header-anchor" href="#用户表"><span>用户表</span></a></h3><p>第一个表是 用户表，都是一些很常用的字段，比较好理解</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `think_user` (</span></span>\n<span class="line"><span>	`id` smallint(5) UNSIGNED NOT NULL AUTO_INCREMENT,</span></span>\n<span class="line"><span>	`account` varchar(64) NOT NULL,</span></span>\n<span class="line"><span>	`nickname` varchar(50) NOT NULL,</span></span>\n<span class="line"><span>	`password` char(32) NOT NULL,</span></span>\n<span class="line"><span>	`email` varchar(50) NOT NULL,</span></span>\n<span class="line"><span>	`remark` varchar(255) NOT NULL,</span></span>\n<span class="line"><span>	`create_time` int(11) UNSIGNED NOT NULL,</span></span>\n<span class="line"><span>	`status` tinyint(1) DEFAULT &#39;0&#39;,</span></span>\n<span class="line"><span>	PRIMARY KEY (`id`),</span></span>\n<span class="line"><span>	UNIQUE `account` (`account`)</span></span>\n<span class="line"><span>) ENGINE = MyISAM AUTO_INCREMENT = 1 CHARSET = utf8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="角色表" tabindex="-1"><a class="header-anchor" href="#角色表"><span>角色表</span></a></h3><p>第二个是 角色表，也可以理解为分组表</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE IF NOT EXISTS `think_role` (</span></span>\n<span class="line"><span>	`id` smallint(6) UNSIGNED NOT NULL AUTO_INCREMENT,</span></span>\n<span class="line"><span>	`name` varchar(20) NOT NULL,</span></span>\n<span class="line"><span>	`pid` smallint(6) DEFAULT NULL,</span></span>\n<span class="line"><span>	`status` tinyint(1) UNSIGNED DEFAULT NULL,</span></span>\n<span class="line"><span>	`remark` varchar(255) DEFAULT NULL,</span></span>\n<span class="line"><span>	PRIMARY KEY (`id`),</span></span>\n<span class="line"><span>	KEY `pid` (`pid`),</span></span>\n<span class="line"><span>	KEY `status` (`status`)</span></span>\n<span class="line"><span>) ENGINE = MyISAM CHARSET = utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="角色—用户—关系映射表" tabindex="-1"><a class="header-anchor" href="#角色—用户—关系映射表"><span>角色—用户—关系映射表</span></a></h3><p>第三个是 角色—用户—关系映射表，注意，这个表的数据，可以是多对多的关系，也就是多个角色对应一个用户，多个用户对应一个角色。在我的实际使用中，没有涉及到一个用户对应多个角色的情况，也是为了简化操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE IF NOT EXISTS `think_role_user` (</span></span>\n<span class="line"><span>	`role_id` mediumint(9) UNSIGNED DEFAULT NULL,</span></span>\n<span class="line"><span>	`user_id` char(32) DEFAULT NULL,</span></span>\n<span class="line"><span>	KEY `group_id` (`role_id`),</span></span>\n<span class="line"><span>	KEY `user_id` (`user_id`)</span></span>\n<span class="line"><span>) ENGINE = MyISAM CHARSET = utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="资源表" tabindex="-1"><a class="header-anchor" href="#资源表"><span>资源表</span></a></h3><p>第四个是节点表，也就是资源表，要注意的两个字段：pid 用来关联节点的层级，level 用来说明该节点是 应用 ，还是模块和操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE IF NOT EXISTS `think_node` (</span></span>\n<span class="line"><span>	`id` smallint(6) UNSIGNED NOT NULL AUTO_INCREMENT,</span></span>\n<span class="line"><span>	`name` varchar(20) NOT NULL,</span></span>\n<span class="line"><span>	`title` varchar(50) DEFAULT NULL,</span></span>\n<span class="line"><span>	`status` tinyint(1) DEFAULT &#39;0&#39;,</span></span>\n<span class="line"><span>	`remark` varchar(255) DEFAULT NULL,</span></span>\n<span class="line"><span>	`sort` smallint(6) UNSIGNED DEFAULT NULL,</span></span>\n<span class="line"><span>	`pid` smallint(6) UNSIGNED NOT NULL,</span></span>\n<span class="line"><span>	`level` tinyint(1) UNSIGNED NOT NULL,</span></span>\n<span class="line"><span>	PRIMARY KEY (`id`),</span></span>\n<span class="line"><span>	KEY `level` (`level`),</span></span>\n<span class="line"><span>	KEY `pid` (`pid`),</span></span>\n<span class="line"><span>	KEY `status` (`status`),</span></span>\n<span class="line"><span>	KEY `name` (`name`)</span></span>\n<span class="line"><span>) ENGINE = MyISAM CHARSET = utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="权限访问表" tabindex="-1"><a class="header-anchor" href="#权限访问表"><span>权限访问表</span></a></h3><p>最后，也是最关键的表 权限访问表，这个表中的数据，是每个角色对应的权限。理解这个表的结构，也就明白了整个 RBAC 的关键。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE IF NOT EXISTS `think_access` (</span></span>\n<span class="line"><span>`role_id` smallint(6) UNSIGNED NOT NULL,</span></span>\n<span class="line"><span>`node_id` smallint(6) UNSIGNED NOT NULL,</span></span>\n<span class="line"><span>`level` tinyint(1) NOT NULL,</span></span>\n<span class="line"><span>`module` varchar(50) DEFAULT NULL,</span></span>\n<span class="line"><span>KEY `groupId` (`role_id`),</span></span>\n<span class="line"><span>KEY `nodeId` (`node_id`)</span></span>\n<span class="line"><span>) ENGINE = MyISAM CHARSET = utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上五张表即可完成基于 RBAC 的权限控制。当然，上面提到的都是整个权限管理的基础数据，也就是需要配置的数据。下一步，就是要在用户登录的时候，获取对应的权限。</p><h2 id="获取用户的权限列表的方法" tabindex="-1"><a class="header-anchor" href="#获取用户的权限列表的方法"><span>获取用户的权限列表的方法</span></a></h2><ol><li>查询用户所属的角色 ID；</li><li>根据角色 ID 从 ACCESS 表中获取该角色所能访问的节点列表；</li><li>从 NODE 中查询节点列表的相关信息；</li><li>对产生的节点列表信息进行处理，生成访问决策列表保存到 SESSION 中；</li></ol>',28)]))}const c=n(l,[["render",p],["__file","Java-Security7.html.vue"]]),h=JSON.parse('{"path":"/audition/other/Java-Security7.html","title":"基于角色的访问控制","lang":"zh-CN","frontmatter":{"description":"基于角色的访问控制 以角色为基础的访问控制（Role-based access control, RBAC），是资讯安全领域中，一种较新且广为使用的访问控制机制，其不同于强制访问控制以及自由选定访问控制直接赋予使用者权限，而是将权限赋予角色。是一套较强制访问控制以及自由选定访问控制更为中性且更具灵活性的访问控制技术。 什么是 RBAC RBAC 模型的...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/audition/other/Java-Security7.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"基于角色的访问控制"}],["meta",{"property":"og:description","content":"基于角色的访问控制 以角色为基础的访问控制（Role-based access control, RBAC），是资讯安全领域中，一种较新且广为使用的访问控制机制，其不同于强制访问控制以及自由选定访问控制直接赋予使用者权限，而是将权限赋予角色。是一套较强制访问控制以及自由选定访问控制更为中性且更具灵活性的访问控制技术。 什么是 RBAC RBAC 模型的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T13:58:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T13:58:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于角色的访问控制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-16T13:58:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是 RBAC","slug":"什么是-rbac","link":"#什么是-rbac","children":[]},{"level":2,"title":"设计对应的数据表结构","slug":"设计对应的数据表结构","link":"#设计对应的数据表结构","children":[{"level":3,"title":"用户表","slug":"用户表","link":"#用户表","children":[]},{"level":3,"title":"角色表","slug":"角色表","link":"#角色表","children":[]},{"level":3,"title":"角色—用户—关系映射表","slug":"角色—用户—关系映射表","link":"#角色—用户—关系映射表","children":[]},{"level":3,"title":"资源表","slug":"资源表","link":"#资源表","children":[]},{"level":3,"title":"权限访问表","slug":"权限访问表","link":"#权限访问表","children":[]}]},{"level":2,"title":"获取用户的权限列表的方法","slug":"获取用户的权限列表的方法","link":"#获取用户的权限列表的方法","children":[]}],"git":{"createdTime":1737035886000,"updatedTime":1737035886000,"contributors":[{"name":"cangbao","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":3.62,"words":1085},"filePathRelative":"audition/other/Java-Security7.md","localizedDate":"2025年1月16日","autoDesc":true}');export{c as comp,h as data};
