import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as n,o as i}from"./app-BasagXBN.js";const r={};function o(l,e){return i(),t("div",null,e[0]||(e[0]=[n('<h1 id="分库与分表带来的分布式困境与应对之策" tabindex="-1"><a class="header-anchor" href="#分库与分表带来的分布式困境与应对之策"><span>分库与分表带来的分布式困境与应对之策</span></a></h1><h2 id="数据迁移与扩容问题" tabindex="-1"><a class="header-anchor" href="#数据迁移与扩容问题"><span>数据迁移与扩容问题</span></a></h2><p>前面介绍到水平分表策略归纳总结为随机分表和连续分表两种情况。连续分表有可能存在数据热点的问题，有些表可能会被频繁地查询从而造成较大压力，热数据的表就成为了整个库的瓶颈，而有些表可能存的是历史数据，很少需要被查询到。连续分表的另外一个好处在于比较容易，不需要考虑迁移旧的数据，只需要添加分表就可以自动扩容。随机分表的数据相对比较均匀，不容易出现热点和并发访问的瓶颈。但是，分表扩展需要迁移旧的数据。</p><p>针对于水平分表的设计至关重要，需要评估中短期内业务的增长速度，对当前的数据量进行容量规划，综合成本因素，推算出大概需要多少分片。对于数据迁移的问题，一般做法是通过程序先读出数据，然后按照指定的分表策略再将数据写入到各个分表中。</p><h2 id="表关联问题" tabindex="-1"><a class="header-anchor" href="#表关联问题"><span>表关联问题</span></a></h2><p>在单库单表的情况下，联合查询是非常容易的。但是，随着分库与分表的演变，联合查询就遇到跨库关联和跨表关系问题。在设计之初就应该尽量避免联合查询，可以通过程序中进行拼装，或者通过反范式化设计进行规避。</p><h2 id="分页与排序问题" tabindex="-1"><a class="header-anchor" href="#分页与排序问题"><span>分页与排序问题</span></a></h2><p>一般情况下，列表分页时需要按照指定字段进行排序。在单库单表的情况下，分页和排序也是非常容易的。但是，随着分库与分表的演变，也会遇到跨库排序和跨表排序问题。为了最终结果的准确性，需要在不同的分表中将数据进行排序并返回，并将不同分表返回的结果集进行汇总和再次排序，最后再返回给用户。</p><h2 id="分布式事务问题" tabindex="-1"><a class="header-anchor" href="#分布式事务问题"><span>分布式事务问题</span></a></h2><p>随着分库与分表的演变，一定会遇到分布式事务问题，那么如何保证数据的一致性就成为一个必须面对的问题。目前，分布式事务并没有很好的解决方案，难以满足数据强一致性，一般情况下，使存储数据尽可能达到用户一致，保证系统经过一段较短的时间的自我恢复和修正，数据最终达到一致。</p><h2 id="分布式全局唯一id" tabindex="-1"><a class="header-anchor" href="#分布式全局唯一id"><span>分布式全局唯一ID</span></a></h2><p>在单库单表的情况下，直接使用数据库自增特性来生成主键ID，这样确实比较简单。在分库分表的环境中，数据分布在不同的分表上，不能再借助数据库自增长特性。需要使用全局唯一 ID，例如 UUID、GUID等。关于如何选择合适的全局唯一 ID，我会在后面的章节中进行介绍。</p>',12)]))}const d=a(r,[["render",o]]),c=JSON.parse('{"path":"/audition/database/Java-Mysql5.html","title":"分库与分表带来的分布式困境与应对之策","lang":"zh-CN","frontmatter":{"description":"分库与分表带来的分布式困境与应对之策 数据迁移与扩容问题 前面介绍到水平分表策略归纳总结为随机分表和连续分表两种情况。连续分表有可能存在数据热点的问题，有些表可能会被频繁地查询从而造成较大压力，热数据的表就成为了整个库的瓶颈，而有些表可能存的是历史数据，很少需要被查询到。连续分表的另外一个好处在于比较容易，不需要考虑迁移旧的数据，只需要添加分表就可以自...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/audition/database/Java-Mysql5.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"分库与分表带来的分布式困境与应对之策"}],["meta",{"property":"og:description","content":"分库与分表带来的分布式困境与应对之策 数据迁移与扩容问题 前面介绍到水平分表策略归纳总结为随机分表和连续分表两种情况。连续分表有可能存在数据热点的问题，有些表可能会被频繁地查询从而造成较大压力，热数据的表就成为了整个库的瓶颈，而有些表可能存的是历史数据，很少需要被查询到。连续分表的另外一个好处在于比较容易，不需要考虑迁移旧的数据，只需要添加分表就可以自..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-05T15:37:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-05T15:37:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分库与分表带来的分布式困境与应对之策\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-05T15:37:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"数据迁移与扩容问题","slug":"数据迁移与扩容问题","link":"#数据迁移与扩容问题","children":[]},{"level":2,"title":"表关联问题","slug":"表关联问题","link":"#表关联问题","children":[]},{"level":2,"title":"分页与排序问题","slug":"分页与排序问题","link":"#分页与排序问题","children":[]},{"level":2,"title":"分布式事务问题","slug":"分布式事务问题","link":"#分布式事务问题","children":[]},{"level":2,"title":"分布式全局唯一ID","slug":"分布式全局唯一id","link":"#分布式全局唯一id","children":[]}],"git":{"createdTime":1754408237000,"updatedTime":1754408237000,"contributors":[{"name":"cangbao","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":2.64,"words":791},"filePathRelative":"audition/database/Java-Mysql5.md","localizedDate":"2025年8月5日","autoDesc":true}');export{d as comp,c as data};
